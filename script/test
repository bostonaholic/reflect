#!/bin/bash

set -e

cd "$(dirname "$0")/.."

if [ "$ENV" = "test" ]; then
  # if executed and the environment is already set to `test`, then we want a
  # clean from scratch application. This almost always means a ci environment,
  # since we set the environment to `test` directly in `script/cibuild`.
  script/setup
else
  # if the environment isn't set to `test`, set it to `test` and update the
  # application to ensure all dependencies are met as well as any other things
  # that need to be up to date. The environment not having
  # already been set to `test` almost always means this is being called on its
  # own from a `development` environment.
  export ENV="test"

  script/update
fi

echo "==> Running testsâ€¦"

# Check if --coverage flag is present
if [[ "$*" == *"--coverage"* ]]; then
  # Set Node.js options for ES modules
  export NODE_OPTIONS="--experimental-vm-modules --no-warnings"
  
  # Remove --coverage from arguments if present
  args=("$@")
  args=("${args[@]/--coverage/}")
  npx jest --coverage "${args[@]}"
# Check if --watch flag is present
elif [[ "$*" == *"--watch"* ]]; then
  # Remove --watch from arguments if present
  args=("$@")
  args=("${args[@]/--watch/}")
  npm run test:watch -- "${args[@]}"
elif [ -n "$1" ]; then
  # pass arguments to test call. This is useful for calling a single test.
  npm run test -- "$@"
else
  npm run test
fi